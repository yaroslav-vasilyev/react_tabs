{"version":3,"sources":["helpers.tsx","components/Tabs/Tabs.tsx","App.tsx","index.tsx"],"names":["getTabById","tabs","tabId","find","tab","id","Tabs","onTabSelected","selectedTabId","selectedTab","className","map","isActiveTab","classNames","href","onClick","title","content","App","useState","setSelectedTabId","ReactDOM","render","document","getElementById"],"mappings":"2MAEaA,EAAa,SAACC,EAAaC,GAAd,OACxBD,EAAKE,MAAK,SAACC,GAAD,OAAcA,EAAIC,KAAOH,MAAUD,EAAK,I,OCUvCK,EAAwB,SAAC,GAI/B,IAHLL,EAGI,EAHJA,KACAM,EAEI,EAFJA,cACAC,EACI,EADJA,cAEMC,EAAcT,EAAWC,EAAMO,GAErC,OACE,sBAAK,UAAQ,gBAAb,UACE,qBAAKE,UAAU,gBAAf,SACE,6BACGT,EAAKU,KAAI,SAACP,GACT,IAAMQ,EAAcH,EAAYJ,KAAOD,EAAIC,GAE3C,OACE,oBACEK,UAAWG,IAAW,CACpB,YAAaD,IAEf,UAAQ,MAJV,SAOE,mBACEE,KAAI,WAAMV,EAAIC,IACd,UAAQ,UACRU,QAAS,WACFH,GACHL,EAAcH,IALpB,SASGA,EAAIY,SAXFZ,EAAIC,WAmBnB,qBACEK,UAAU,QACV,UAAQ,aAFV,SAIGD,EAAYQ,cC/CRhB,EAAc,CACzB,CAAEI,GAAI,QAASW,MAAO,QAASC,QAAS,eACxC,CAAEZ,GAAI,QAASW,MAAO,QAASC,QAAS,eACxC,CAAEZ,GAAI,QAASW,MAAO,QAASC,QAAS,gBAG7BC,EAAgB,WAC3B,MAA0CC,mBAAS,SAAnD,mBAAOX,EAAP,KAAsBY,EAAtB,KAEMX,EAAcT,EAAWC,EAAMO,GAQrC,OACE,sBAAKE,UAAU,UAAf,UACE,oBAAIA,UAAU,QAAd,mCACsBD,EAAYO,SAGlC,cAAC,EAAD,CACEf,KAAMA,EACNM,cAdoB,SACxBH,GAEAgB,EAAiBhB,EAAIC,KAYjBG,cAAeA,QChCvBa,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9805fa0f.chunk.js","sourcesContent":["import { Tab } from './types/Tab';\n\nexport const getTabById = (tabs: Tab[], tabId: string) => (\n  tabs.find((tab: Tab) => tab.id === tabId) || tabs[0]\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Tab } from '../../types/Tab';\nimport { getTabById } from '../../helpers';\n\ninterface Props {\n  tabs: Tab[];\n  onTabSelected: (\n    tab: Tab,\n  ) => void;\n  selectedTabId: string;\n}\n\nexport const Tabs: React.FC<Props> = ({\n  tabs,\n  onTabSelected,\n  selectedTabId,\n}) => {\n  const selectedTab = getTabById(tabs, selectedTabId);\n\n  return (\n    <div data-cy=\"TabsComponent\">\n      <div className=\"tabs is-boxed\">\n        <ul>\n          {tabs.map((tab) => {\n            const isActiveTab = selectedTab.id === tab.id;\n\n            return (\n              <li\n                className={classNames({\n                  'is-active': isActiveTab,\n                })}\n                data-cy=\"Tab\"\n                key={tab.id}\n              >\n                <a\n                  href={`#${tab.id}`}\n                  data-cy=\"TabLink\"\n                  onClick={() => {\n                    if (!isActiveTab) {\n                      onTabSelected(tab);\n                    }\n                  }}\n                >\n                  {tab.title}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n\n      <div\n        className=\"block\"\n        data-cy=\"TabContent\"\n      >\n        {selectedTab.content}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { Tabs } from './components/Tabs/Tabs';\nimport { Tab } from './types/Tab';\nimport { getTabById } from './helpers';\n\nexport const tabs: Tab[] = [\n  { id: 'tab-1', title: 'Tab 1', content: 'Some text 1' },\n  { id: 'tab-2', title: 'Tab 2', content: 'Some text 2' },\n  { id: 'tab-3', title: 'Tab 3', content: 'Some text 3' },\n];\n\nexport const App: React.FC = () => {\n  const [selectedTabId, setSelectedTabId] = useState('tab-1');\n\n  const selectedTab = getTabById(tabs, selectedTabId);\n\n  const handleTabSelected = (\n    tab: Tab,\n  ) => {\n    setSelectedTabId(tab.id);\n  };\n\n  return (\n    <div className=\"section\">\n      <h1 className=\"title\">\n        {`Selected tab is ${selectedTab.title}`}\n      </h1>\n\n      <Tabs\n        tabs={tabs}\n        onTabSelected={handleTabSelected}\n        selectedTabId={selectedTabId}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}